name: CI

on:
  push:
    branches: [master]
  pull_request:

permissions:
  contents: read #  to fetch code (actions/checkout)

env:
  nix_path: nixpkgs=channel:nixos-24.05

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Nix
        uses: cachix/install-nix-action@v25
        with:
          nix_path: "${{ env.nix_path }}"
      - name: Setup cachix
        uses: cachix/cachix-action@v14
        with:
          name: cofob
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
      - name: Cache Rust target
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Lint
        run: |
          nix develop --command cargo fmt --check
          nix develop --command cargo clippy

      - name: Test
        run: |
          nix develop --command cargo test

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Nix
        uses: cachix/install-nix-action@v25
        with:
          nix_path: "${{ env.nix_path }}"
      - name: Setup cachix
        uses: cachix/cachix-action@v14
        with:
          name: cofob
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Build derivations
        run: |
          nix build .#fastside

  docker:
    name: Build Docker container
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Nix
        uses: cachix/install-nix-action@v25
        with:
          nix_path: "${{ env.nix_path }}"
      - name: Setup cachix
        uses: cachix/cachix-action@v14
        with:
          name: cofob
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lowercase repository name
        id: repo
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ github.repository }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/${{ steps.repo.outputs.lowercase }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}

      - name: Docker meta
        id: meta2
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/${{ steps.repo.outputs.lowercase }}/baked
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}

      - name: Build remote
        run: |
          nix build .#fastside-docker
          docker load < result

      - name: Push to registry
        run: |
          tags="${{ steps.meta.outputs.tags }}"
          for tag in $tags; do
            docker tag fastside $tag
            docker push $tag
          done

      - name: Build baked
        run: |
          nix build .#fastside-docker-baked-services
          docker load < result

      - name: Push to registry
        run: |
          tags="${{ steps.meta2.outputs.tags }}"
          for tag in $tags; do
            docker tag fastside $tag
            docker push $tag
          done
